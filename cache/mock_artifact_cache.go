// Code generated by mockery v1.0.0. DO NOT EDIT.

package cache

import (
	types "github.com/aquasecurity/fanal/types"
	mock "github.com/stretchr/testify/mock"
)

// MockArtifactCache is an autogenerated mock type for the ArtifactCache type
type MockArtifactCache struct {
	mock.Mock
}

type ArtifactCacheMissingBlobsArgs struct {
	ArtifactID         string
	ArtifactIDAnything bool
	BlobIDs            []string
	BlobIDsAnything    bool
	Opts               []Option
	OptsAnything       bool
}

type ArtifactCacheMissingBlobsReturns struct {
	MissingArtifact bool
	MissingBlobIDs  []string
	Err             error
}

type ArtifactCacheMissingBlobsExpectation struct {
	Args    ArtifactCacheMissingBlobsArgs
	Returns ArtifactCacheMissingBlobsReturns
}

func (_m *MockArtifactCache) ApplyMissingBlobsExpectation(e ArtifactCacheMissingBlobsExpectation) {
	var args []interface{}
	if e.Args.ArtifactIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.ArtifactID)
	}
	if e.Args.BlobIDsAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.BlobIDs)
	}
	if e.Args.OptsAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Opts)
	}
	_m.On("MissingBlobs", args...).Return(e.Returns.MissingArtifact, e.Returns.MissingBlobIDs, e.Returns.Err)
}

func (_m *MockArtifactCache) ApplyMissingBlobsExpectations(expectations []ArtifactCacheMissingBlobsExpectation) {
	for _, e := range expectations {
		_m.ApplyMissingBlobsExpectation(e)
	}
}

// MissingBlobs provides a mock function with given fields: artifactID, blobIDs, opts
func (_m *MockArtifactCache) MissingBlobs(artifactID string, blobIDs []string, opts ...Option) (bool, []string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, artifactID, blobIDs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, []string, ...Option) bool); ok {
		r0 = rf(artifactID, blobIDs, opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(string, []string, ...Option) []string); ok {
		r1 = rf(artifactID, blobIDs, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, []string, ...Option) error); ok {
		r2 = rf(artifactID, blobIDs, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type ArtifactCachePutArtifactArgs struct {
	ArtifactID           string
	ArtifactIDAnything   bool
	ArtifactInfo         types.ArtifactInfo
	ArtifactInfoAnything bool
	Opts                 []Option
	OptsAnything         bool
}

type ArtifactCachePutArtifactReturns struct {
	Err error
}

type ArtifactCachePutArtifactExpectation struct {
	Args    ArtifactCachePutArtifactArgs
	Returns ArtifactCachePutArtifactReturns
}

func (_m *MockArtifactCache) ApplyPutArtifactExpectation(e ArtifactCachePutArtifactExpectation) {
	var args []interface{}
	if e.Args.ArtifactIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.ArtifactID)
	}
	if e.Args.ArtifactInfoAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.ArtifactInfo)
	}
	if e.Args.OptsAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Opts)
	}
	_m.On("PutArtifact", args...).Return(e.Returns.Err)
}

func (_m *MockArtifactCache) ApplyPutArtifactExpectations(expectations []ArtifactCachePutArtifactExpectation) {
	for _, e := range expectations {
		_m.ApplyPutArtifactExpectation(e)
	}
}

// PutArtifact provides a mock function with given fields: artifactID, artifactInfo, opts
func (_m *MockArtifactCache) PutArtifact(artifactID string, artifactInfo types.ArtifactInfo, opts ...Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, artifactID, artifactInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.ArtifactInfo, ...Option) error); ok {
		r0 = rf(artifactID, artifactInfo, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ArtifactCachePutBlobArgs struct {
	BlobID           string
	BlobIDAnything   bool
	BlobInfo         types.BlobInfo
	BlobInfoAnything bool
	Opts             []Option
	OptsAnything     bool
}

type ArtifactCachePutBlobReturns struct {
	Err error
}

type ArtifactCachePutBlobExpectation struct {
	Args    ArtifactCachePutBlobArgs
	Returns ArtifactCachePutBlobReturns
}

func (_m *MockArtifactCache) ApplyPutBlobExpectation(e ArtifactCachePutBlobExpectation) {
	var args []interface{}
	if e.Args.BlobIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.BlobID)
	}
	if e.Args.BlobInfoAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.BlobInfo)
	}
	if e.Args.OptsAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Opts)
	}
	_m.On("PutBlob", args...).Return(e.Returns.Err)
}

func (_m *MockArtifactCache) ApplyPutBlobExpectations(expectations []ArtifactCachePutBlobExpectation) {
	for _, e := range expectations {
		_m.ApplyPutBlobExpectation(e)
	}
}

// PutBlob provides a mock function with given fields: blobID, blobInfo, opts
func (_m *MockArtifactCache) PutBlob(blobID string, blobInfo types.BlobInfo, opts ...Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, blobID, blobInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.BlobInfo, ...Option) error); ok {
		r0 = rf(blobID, blobInfo, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
