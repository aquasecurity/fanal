// Code generated by mockery v1.0.0. DO NOT EDIT.

package image

import context "context"
import mock "github.com/stretchr/testify/mock"
import types "github.com/aquasecurity/fanal/types"

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type CheckOptionsArgs struct {
	Domain         string
	DomainAnything bool
	Option         types.DockerOption
	OptionAnything bool
}

type CheckOptionsReturns struct {
	_a0 error
}

type CheckOptionsExpectation struct {
	Args    CheckOptionsArgs
	Returns CheckOptionsReturns
}

func (_m *MockRegistry) ApplyCheckOptionsExpectation(e CheckOptionsExpectation) {
	var args []interface{}
	if e.Args.DomainAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Domain)
	}
	if e.Args.OptionAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Option)
	}
	_m.On("CheckOptions", args...).Return(e.Returns._a0)
}

func (_m *MockRegistry) ApplyCheckOptionsExpectations(expectations []CheckOptionsExpectation) {
	for _, e := range expectations {
		_m.ApplyCheckOptionsExpectation(e)
	}
}

// CheckOptions provides a mock function with given fields: domain, option
func (_m *MockRegistry) CheckOptions(domain string, option types.DockerOption) error {
	ret := _m.Called(domain, option)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.DockerOption) error); ok {
		r0 = rf(domain, option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type GetCredentialArgs struct {
	Ctx         context.Context
	CtxAnything bool
}

type GetCredentialReturns struct {
	_a0 string
	_a1 string
	_a2 error
}

type GetCredentialExpectation struct {
	Args    GetCredentialArgs
	Returns GetCredentialReturns
}

func (_m *MockRegistry) ApplyGetCredentialExpectation(e GetCredentialExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	_m.On("GetCredential", args...).Return(e.Returns._a0, e.Returns._a1, e.Returns._a2)
}

func (_m *MockRegistry) ApplyGetCredentialExpectations(expectations []GetCredentialExpectation) {
	for _, e := range expectations {
		_m.ApplyGetCredentialExpectation(e)
	}
}

// GetCredential provides a mock function with given fields: ctx
func (_m *MockRegistry) GetCredential(ctx context.Context) (string, string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
