// Code generated by mockery v1.0.0. DO NOT EDIT.

package image

import context "context"
import mock "github.com/stretchr/testify/mock"
import types "github.com/containers/image/types"

// MockImageCloser is an autogenerated mock type for the ImageCloser type
type MockImageCloser struct {
	mock.Mock
}

type ConfigBlobArgs struct {
	Ctx         context.Context
	CtxAnything bool
}

type ConfigBlobReturns struct {
	Blob []byte
	Err  error
}

type ConfigBlobExpectation struct {
	Args    ConfigBlobArgs
	Returns ConfigBlobReturns
}

func (_m *MockImageCloser) ApplyConfigBlobExpectation(e ConfigBlobExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	_m.On("ConfigBlob", args...).Return(e.Returns.Blob, e.Returns.Err)
}

func (_m *MockImageCloser) ApplyConfigBlobExpectations(expectations []ConfigBlobExpectation) {
	for _, e := range expectations {
		_m.ApplyConfigBlobExpectation(e)
	}
}

// ConfigBlob provides a mock function with given fields: ctx
func (_m *MockImageCloser) ConfigBlob(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type LayerInfosReturns struct {
	LayerInfos []types.BlobInfo
}

type LayerInfosExpectation struct {
	Returns LayerInfosReturns
}

func (_m *MockImageCloser) ApplyLayerInfosExpectation(e LayerInfosExpectation) {
	var args []interface{}
	_m.On("LayerInfos", args...).Return(e.Returns.LayerInfos)
}

func (_m *MockImageCloser) ApplyLayerInfosExpectations(expectations []LayerInfosExpectation) {
	for _, e := range expectations {
		_m.ApplyLayerInfosExpectation(e)
	}
}

// LayerInfos provides a mock function with given fields:
func (_m *MockImageCloser) LayerInfos() []types.BlobInfo {
	ret := _m.Called()

	var r0 []types.BlobInfo
	if rf, ok := ret.Get(0).(func() []types.BlobInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.BlobInfo)
		}
	}

	return r0
}
